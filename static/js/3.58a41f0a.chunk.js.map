{"version":3,"sources":["webpack:///./src/app/components/Title/Title.css","webpack:///./src/posts/components/PostsList/PostsList.css","webpack:///./src/posts/components/Post/Post.css","webpack:///./src/app/hooks/useLoadingState.ts","webpack:///./src/app/components/Title/index.ts","webpack:///./src/app/components/Title/Title.tsx","webpack:///./src/app/components/ErrorLoading/index.ts","webpack:///./src/app/components/ErrorLoading/ErrorLoading.tsx","webpack:///./src/posts/components/Post/index.ts","webpack:///./src/posts/components/Post/Post.tsx","webpack:///./src/posts/components/PostsList/index.ts","webpack:///./src/posts/components/PostsList/PostsList.tsx","webpack:///./src/posts/types.ts","webpack:///./src/posts/stores/PostsStore/services.ts","webpack:///./src/posts/stores/PostsStore/PostsStore.ts","webpack:///./src/posts/stores/PostsStore/index.ts","webpack:///./src/posts/hooks/usePosts.ts","webpack:///./src/posts/routes/Posts/Posts.tsx","webpack:///./src/posts/routes/Posts/Posts.css"],"names":["module","exports","fsState","memo","children","className","root","onReload","loading","update","handle","catch","disabled","onClick","post","title","body","posts","map","key","id","state","idle","setState","success","failure","IPost","userId","fetchPosts","data","client","get","fetch","services","forEach","this","set","load","then","done","error","reload","Array","from","values","filterPosts","user","onlyMy","length","filter","setOnlyMy","UserContext","onOnlyMyChange","event","target","checked","header","Boolean","type","onChange"],"mappings":"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","file":"static/js/3.58a41f0a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"_3gOJhAGP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"_1ptYWwxx\",\"post\":\"_2lnjKkBs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"_3Hh370Di\",\"title\":\"_3efqJP5_\",\"body\":\"_1xNDSxg9\"};","import { useState, useMemo } from 'react';\n\nenum fsState {\n  idle,\n  loading,\n  success,\n  failure,\n}\n\nfunction useLoadingState() {\n  const [state, update] = useState(fsState.idle);\n\n  const setState = useMemo(() => ({\n    load() { update(fsState.loading) },\n    done() { update(fsState.success) },\n    error() { update(fsState.failure) },\n  }), []);\n\n  return {\n    loading: state === fsState.loading,\n    success: state === fsState.success,\n    failure: state === fsState.failure,\n    setState,\n  };\n}\n\nexport default useLoadingState;\n","import Title from './Title';\n\nexport default Title;\n","import React from 'react';\n\nimport css from './Title.css';\n\nexport default React.memo(\n  function Title({ children }) {\n    return <h1 className={css.root}>{children}</h1>;\n  }\n);\n","import ErrorLoading from './ErrorLoading';\n\nexport default ErrorLoading;\n","import React, { useState, useCallback } from 'react';\n\ninterface IProps {\n  onReload: () => Promise<void>;\n}\n\nexport default React.memo<IProps>(\n  function ErrorLoading({ onReload }) {\n    const [loading, update] = useState(false);\n\n    const handle = useCallback(() => {\n      update(true);\n      onReload().catch(() => update(false));\n    }, [onReload]);\n\n    return (\n      <div>\n        <span>Something went wrong, </span>\n        <button disabled={loading} onClick={handle}>\n          reload\n        </button>\n      </div>\n    );\n  }\n);\n","import Post from './Post';\n\nexport default Post;\n","import React from 'react';\nimport { observer } from 'mobx-react-lite';\nimport classNames from 'classnames';\nimport { IPost } from 'posts/types';\n\nimport css from './Post.css';\n\ninterface IProps {\n  post: IPost;\n  className?: string;\n}\n\nexport default observer<IProps>(\n  function Post({ post, className }) {\n    return (\n      <div className={classNames(css.root, className)}>\n        <h3 className={css.title}>\n          {post.title}\n        </h3>\n        <p className={css.body}>\n          {post.body}\n        </p>\n      </div>\n    );\n  }\n);\n","import PostsList from './PostsList';\n\nexport default PostsList;\n","import React from 'react';\nimport { observer } from 'mobx-react-lite';\nimport classNames from 'classnames';\nimport { IPost } from 'posts/types';\nimport Post from '../Post';\n\nimport css from './PostsList.css';\n\ninterface IProps {\n  posts: IPost[];\n  className?: string;\n}\n\nexport default observer<IProps>(\n  function PostsList({ posts, className }) {\n    return (\n      <div className={classNames(css.root, className)}>\n        {posts.map(post => (\n          <Post\n            key={post.id}\n            post={post}\n            className={css.post}\n          />\n        ))}\n      </div>\n    );\n  }\n);\n","import * as t from 'io-ts';\n\nexport const IPost = t.readonly(\n  t.interface({\n    userId: t.number,\n    id: t.number,\n    title: t.string,\n    body: t.string,\n  })\n);\n\nexport type IPost = t.TypeOf<typeof IPost>;\n","import * as t from 'io-ts';\nimport * as tPromise from 'io-ts-promise';\nimport client from 'client';\nimport { IPost } from 'posts/types';\n\nconst fetchPosts = async () => {\n  const data = await client.get<IPost[]>('/posts');\n  return tPromise.decode(t.array(IPost), data);\n};\n\nexport default { fetchPosts };\n","import { action, observable, ObservableMap, runInAction } from 'mobx';\nimport { IPost } from 'posts/types';\nimport services from './services';\n\nclass PostsStore {\n  @observable posts: ObservableMap<number, IPost>;\n\n  constructor() {\n    this.posts = observable.map({});\n  }\n\n  @action fetch = async () => {\n    const posts = await services.fetchPosts();\n    runInAction(() => {\n      posts.forEach(post => this.posts.set(post.id, post));\n    });\n  };\n}\n\nexport default PostsStore;\n","import PostsStore from './PostsStore';\n\nexport default new PostsStore();\n","import { useEffect, useCallback } from 'react';\nimport useLoadingState from 'app/hooks/useLoadingState';\nimport store from 'posts/stores/PostsStore';\n\nfunction usePosts() {\n  const { setState, ...state } = useLoadingState();\n\n  useEffect(() => {\n    setState.load();\n    store.fetch()\n      .then(setState.done)\n      .catch(setState.error);\n  }, [setState]);\n\n  const reload = useCallback(() => {\n    return store.fetch().then(setState.done);\n  }, [setState]);\n\n  return {\n    ...state,\n    reload,\n    posts: Array.from(store.posts.values()),\n  };\n}\n\nexport default usePosts;\n","import React, { useState, useContext, useCallback } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport Title from 'app/components/Title';\nimport ErrorLoading from 'app/components/ErrorLoading';\nimport UserContext from 'app/contexts/UserContext';\nimport { IUser } from 'app/types';\nimport PostsList from 'posts/components/PostsList';\nimport usePosts from 'posts/hooks/usePosts';\nimport { IPost } from 'posts/types';\n\nimport css from './Posts.css';\n\nfunction filterPosts(posts: IPost[], user: IUser | null, onlyMy: boolean): IPost[] {\n  return user && posts.length && onlyMy\n    ? posts.filter(post => post.userId === user.id)\n    : posts;\n}\n\nexport default observer(function Posts() {\n  const [onlyMy, setOnlyMy] = useState(false);\n\n  const user = useContext(UserContext);\n  const { loading, success, failure, reload, posts } = usePosts();\n\n  const onOnlyMyChange = useCallback((event) => (\n    setOnlyMy(event.target.checked)\n  ), []);\n\n  return (\n    <>\n      <div className={css.header}>\n        <Title>Posts</Title>\n        {Boolean(user) && (\n          <label>\n            <input type=\"checkbox\" checked={onlyMy} onChange={onOnlyMyChange} />\n            <span>Only my posts</span>\n          </label>\n        )}\n      </div>\n      {loading && <div>Loading posts...</div>}\n      {failure && <ErrorLoading onReload={reload} />}\n      {success && <PostsList posts={filterPosts(posts, user, onlyMy)} />}\n    </>\n  );\n});\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"zGVB3LFj\"};"],"sourceRoot":""}