{"version":3,"sources":["webpack:///./src/app/components/Title/Title.css","webpack:///./src/posts/components/PostsList/PostsList.css","webpack:///./src/posts/components/Post/Post.css","webpack:///./src/app/components/Title/index.ts","webpack:///./src/app/components/Title/Title.tsx","webpack:///./src/posts/components/Post/index.ts","webpack:///./src/posts/components/Post/Post.tsx","webpack:///./src/posts/components/PostsList/index.ts","webpack:///./src/posts/components/PostsList/PostsList.tsx","webpack:///./src/posts/types.ts","webpack:///./src/posts/stores/PostsStore/services.ts","webpack:///./src/posts/stores/PostsStore/PostsStore.ts","webpack:///./src/posts/stores/PostsStore/index.ts","webpack:///./src/posts/routes/Posts/Posts.tsx","webpack:///./src/posts/hooks/usePosts.ts","webpack:///./src/posts/routes/Posts/Posts.css"],"names":["module","exports","memo","children","className","root","post","title","body","posts","loading","map","key","id","IPost","userId","fetchPosts","data","client","get","fetch","this","status","then","callback","forEach","set","catch","error","console","log","StatusStore","services","filterPosts","user","onlyMy","length","filter","setOnlyMy","useUser","onOnlyMyChange","event","target","checked","header","Boolean","type","onChange","values"],"mappings":"kFACAA,EAAOC,QAAU,CAAC,KAAO,c,yBCAzBD,EAAOC,QAAU,CAAC,KAAO,YAAY,KAAO,c,yBCA5CD,EAAOC,QAAU,CAAC,KAAO,YAAY,MAAQ,YAAY,KAAO,c,2GCCjD,ECEA,IAAMC,MACnB,UAAe,SAAEC,IACf,OAAO,wBAAIC,UAAW,IAAIC,MAAOF,M,4DCJtB,ECUA,aACb,UAAc,KAAEG,EAAI,UAAEF,IACpB,OACE,yBAAKA,UAAW,IAAW,IAAIC,KAAMD,IACnC,wBAAIA,UAAW,IAAIG,OAChBD,EAAKC,OAER,uBAAGH,UAAW,IAAII,MACfF,EAAKE,U,uBClBD,ECYA,aACb,UAAmB,MAAEC,EAAK,QAAEC,EAAO,UAAEN,IACnC,OACE,yBAAKA,UAAW,IAAW,IAAIC,KAAMD,IAClCK,EAAME,IAAIL,GACT,kBAAC,EAAI,CACHM,IAAKN,EAAKO,GACVP,KAAMA,EACNF,UAAW,IAAIE,QAGlBI,GAAW,+C,sECvBb,MAAMI,EAAQ,YAAY,CAC/BC,OAAQ,SACRF,GAAI,SACJN,MAAO,SACPC,KAAM,W,0SCIO,OAAEQ,WALE,IAAY,OAAD,6BAC5B,MAAMC,QAAaC,EAAA,EAAOC,IAAa,UACvC,OAAO,SAAgB,QAAQL,GAAQG,O,sUCFzC,MAAM,EAKJ,cAKQ,KAAAG,MAAQ,IACdC,KAAKC,OAAOF,QACTG,KAAK,EAAEd,EAAOe,KAAc,YAAY,KACvCf,EAAMgB,QAAQnB,GAAQe,KAAKZ,MAAMiB,IAAIpB,EAAKO,GAAIP,IAC9CkB,OAEDG,MAAOC,IACNC,QAAQC,IAAIF,KAXhBP,KAAKC,OAAS,IAAIS,EAAA,EAAYC,EAAShB,YACvCK,KAAKZ,MAAQ,IAAWE,IAAI,KAJlB,GAAX,K,4BAOO,GAAP,K,4BAaY,IC1BA,MD0BA,E,uBEjBf,SAASsB,EAAYxB,EAAgByB,EAAoBC,GACvD,OAAOD,GAAQzB,EAAM2B,QAAUD,EAC3B1B,EAAM4B,OAAO/B,GAAQA,EAAKS,SAAWmB,EAAKrB,IAC1CJ,EAGS,uBAAS,WACtB,MAAO0B,EAAQG,GAAa,oBAAS,IAE/B,KAAEJ,GAAS,OAAAK,EAAA,MACX,MAAE9B,EAAK,OAAEa,IClBDF,GDkBqB,ECjBnC,oBAAU,KACJA,GAAO,EAAMA,QAAQO,SACxB,IAEI,GALM,IAACP,EDoBd,MAAMoB,EAAiB,sBAAaC,GAAUH,EAAUG,EAAMC,OAAOC,SAAU,IAE/E,OACE,6BACE,yBAAKvC,UAAW,IAAIwC,QAClB,kBAAC,EAAK,cACLC,QAAQX,IACP,+BACE,2BAAOY,KAAK,WAAWH,QAASR,EAAQY,SAAUP,I,kBAKxD,kBAAC,EAAS,CACR9B,QAASY,EAAOZ,QAChBD,MAAOwB,EAAY,IAAIxB,EAAMuC,UAAWd,EAAMC,U,uBErCtDnC,EAAOC,QAAU,CAAC,OAAS","file":"static/js/3.05afa6ec.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"_3gOJhAGP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"_1ptYWwxx\",\"post\":\"_2lnjKkBs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"_3Hh370Di\",\"title\":\"_3efqJP5_\",\"body\":\"_1xNDSxg9\"};","import Title from './Title';\n\nexport default Title;\n","import React from 'react';\n\nimport css from './Title.css';\n\nexport default React.memo(\n  function Title({ children }) {\n    return <h1 className={css.root}>{children}</h1>;\n  }\n);\n","import Post from './Post';\n\nexport default Post;\n","import React from 'react';\nimport { observer } from 'mobx-react-lite';\nimport classNames from 'classnames';\nimport { IPost } from 'posts/types';\n\nimport css from './Post.css';\n\ninterface IProps {\n  post: IPost;\n  className?: string;\n}\n\nexport default observer<IProps>(\n  function Post({ post, className }) {\n    return (\n      <div className={classNames(css.root, className)}>\n        <h3 className={css.title}>\n          {post.title}\n        </h3>\n        <p className={css.body}>\n          {post.body}\n        </p>\n      </div>\n    );\n  }\n);\n","import PostsList from './PostsList';\n\nexport default PostsList;\n","import React from 'react';\nimport { observer } from 'mobx-react-lite';\nimport classNames from 'classnames';\nimport { IPost } from 'posts/types';\nimport Post from '../Post';\n\nimport css from './PostsList.css';\n\ninterface IProps {\n  posts: IPost[];\n  loading: boolean;\n  className?: string;\n}\n\nexport default observer<IProps>(\n  function PostsList({ posts, loading, className }) {\n    return (\n      <div className={classNames(css.root, className)}>\n        {posts.map(post => (\n          <Post\n            key={post.id}\n            post={post}\n            className={css.post}\n          />\n        ))}\n        {loading && <div>Loading...</div>}\n      </div>\n    );\n  }\n);\n","import * as t from 'io-ts';\n\nexport const IPost = t.interface({\n  userId: t.number,\n  id: t.number,\n  title: t.string,\n  body: t.string,\n});\n\nexport type IPost = t.TypeOf<typeof IPost>;\n","import * as t from 'io-ts';\nimport * as tPromise from 'io-ts-promise';\nimport client from 'client';\nimport { IPost } from 'posts/types';\n\nconst fetchPosts = async () => {\n  const data = await client.get<IPost[]>('/posts');\n  return tPromise.decode(t.array(IPost), data);\n};\n\nexport default { fetchPosts };\n","import { action, observable, ObservableMap, runInAction } from 'mobx';\nimport StatusStore from 'app/stores/StatusStore';\nimport { IPost } from 'posts/types';\nimport services from './services';\n\nclass PostsStore {\n\n  status: StatusStore<IPost[]>;\n  @observable posts: ObservableMap<number, IPost>;\n\n  constructor() {\n    this.status = new StatusStore(services.fetchPosts);\n    this.posts = observable.map({});\n  }\n\n  @action fetch = () => (\n    this.status.fetch()\n      .then(([posts, callback]) => runInAction(() => {\n        posts.forEach(post => this.posts.set(post.id, post));\n        callback();\n      }))\n      .catch((error) => {\n        console.log(error);\n      })\n  );\n\n}\n\nexport default PostsStore;\n","import PostsStore from './PostsStore';\n\nexport default new PostsStore();\n","import React, { useState, useCallback } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport Title from 'app/components/Title';\nimport useUser from 'app/hooks/useUser';\nimport { IUser } from 'app/types';\nimport PostsList from 'posts/components/PostsList';\nimport usePosts from 'posts/hooks/usePosts';\nimport { IPost } from 'posts/types';\n\nimport css from './Posts.css';\n\nfunction filterPosts(posts: IPost[], user: IUser | null, onlyMy: boolean): IPost[] {\n  return user && posts.length && onlyMy\n    ? posts.filter(post => post.userId === user.id)\n    : posts;\n}\n\nexport default observer(function Posts() {\n  const [onlyMy, setOnlyMy] = useState(false);\n\n  const { user } = useUser();\n  const { posts, status } = usePosts(true);\n\n  const onOnlyMyChange = useCallback((event) => setOnlyMy(event.target.checked), []);\n\n  return (\n    <div>\n      <div className={css.header}>\n        <Title>Posts</Title>\n        {Boolean(user) && (\n          <label>\n            <input type=\"checkbox\" checked={onlyMy} onChange={onOnlyMyChange} />\n            Only my posts\n          </label>\n        )}\n      </div>\n      <PostsList\n        loading={status.loading}\n        posts={filterPosts([...posts.values()], user, onlyMy)}\n      />\n    </div>\n  );\n});\n","import store from 'posts/stores/PostsStore';\nimport { useEffect } from 'react';\n\nexport default (fetch?: boolean) => {\n  useEffect(() => {\n    if (fetch) store.fetch().catch();\n  }, []);\n\n  return store;\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"zGVB3LFj\"};"],"sourceRoot":""}