{"version":3,"sources":["app/components/Title/Title.module.css","posts/components/Post/Post.module.css","posts/components/PostsList/PostsList.module.css","posts/routes/Posts/Posts.module.css","app/components/Title/index.ts","app/components/Title/Title.tsx","posts/components/Post/index.ts","posts/components/Post/Post.tsx","posts/components/PostsList/index.ts","posts/components/PostsList/PostsList.tsx","posts/stores/PostsStore/services.ts","posts/stores/PostsStore/index.ts","posts/stores/PostsStore/PostsStore.ts","posts/routes/Posts/Posts.tsx"],"names":["module","exports","root","title","body","post","header","Title","React","memo","_ref","children","react_default","a","createElement","className","styles","Post","observer","classNames","PostsList","posts","fetching","map","components_Post","key","id","uiLoading","Fetch","services","client","get","postsStore","_this","this","fetcher","then","runInAction","forEach","set","observable","None","action","PostsStoreContext","createContext","filterPosts","user","onlyMy","items","Array","from","values","length","filter","userId","Posts","_useState","useState","_useState2","Object","slicedToArray","setOnlyMy","useContext","UserContext","useEffect","fetch","onOnlyMyChange","useCallback","event","target","checked","components_Title","type","onChange","htmlFor","components_PostsList"],"mappings":"4EACAA,EAAAC,QAAA,CAAkBC,KAAA,yCCAlBF,EAAAC,QAAA,CAAkBC,KAAA,mBAAAC,MAAA,oBAAAC,KAAA,wCCAlBJ,EAAAC,QAAA,CAAkBC,KAAA,wBAAAG,KAAA,6CCAlBL,EAAAC,QAAA,CAAkBK,OAAA,wHCCHC,ECCwBC,IAAMC,KAC3C,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACEC,EAAAC,EAAAC,cAAA,MAAIC,UAAWC,IAAOd,MAAOS,sCCHlBM,ECS+BC,YAC5C,SAAAR,GAAA,IAAGL,EAAHK,EAAGL,KAAMU,EAATL,EAASK,UAAT,OACEH,EAAAC,EAAAC,cAAA,OAAKC,UAAWI,IAAWH,IAAOd,KAAMa,IACtCH,EAAAC,EAAAC,cAAA,MAAIC,UAAWC,IAAOb,OACnBE,EAAKF,OAERS,EAAAC,EAAAC,cAAA,KAAGC,UAAWC,IAAOZ,MAClBC,EAAKD,iCChBCgB,ECYoCF,YACjD,SAAAR,GAAA,IAAGW,EAAHX,EAAGW,MAAOC,EAAVZ,EAAUY,SAAUP,EAApBL,EAAoBK,UAApB,OACEH,EAAAC,EAAAC,cAAA,OAAKC,UAAWI,IAAWH,IAAOd,KAAMa,IACrCM,EAAME,IAAI,SAAAlB,GAAI,OACbO,EAAAC,EAAAC,cAACU,EAAD,CACEC,IAAKpB,EAAKqB,GACVrB,KAAMA,EACNU,UAAWC,IAAOX,SAGrBiB,IAAaK,IAAUC,OAAShB,EAAAC,EAAAC,cAAA,iGCnBxBe,EAFI,kBAAwBC,IAAOC,IAAI,WCAhDC,EAAa,2KCOD,IAAAC,EAAAC,KACd,OAAOC,YAAQD,KAAM,WAAYL,KAC9BO,KAAK,SAACf,GAAD,OAAWgB,YAAY,kBAC3BhB,EAAMiB,QAAQ,SAAAjC,GAAI,OAAI4B,EAAKZ,MAAMkB,IAAIlC,EAAKqB,GAAIrB,wDANnDmC,8EAAiCb,IAAUc,2CAC3CD,8EAAmBA,IAAWjB,IAAI,wCAElCmB,0EDNUC,EAAoBC,wBAAcZ,oBEMzCa,EAAc,SAACxB,EAA2ByB,EAAoBC,GAClE,IAAIC,EAAQC,MAAMC,KAAK7B,EAAM8B,UAE7B,OAAOL,GAAQE,EAAMI,QAAUL,EAC3BC,EAAMK,OAAO,SAAAhD,GAAI,OAAIA,EAAKiD,SAAWR,EAAKpB,KAC1CsB,GAGAO,EAAiCrC,YAAS,WAAM,IAAAsC,EACxBC,oBAAS,GADeC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC7CT,EAD6CW,EAAA,GACrCG,EADqCH,EAAA,GAG9CZ,EAAOgB,qBAAWC,KAClB/B,EAAa8B,qBAAWnB,GAE9BqB,oBAAU,WAAQhC,EAAWiC,SAAW,IAExC,IAAMC,EAAiBC,sBAAY,SAACC,GAAD,OAAWP,EAAUO,EAAMC,OAAOC,UAAU,IAE/E,OACE1D,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOV,QACrBM,EAAAC,EAAAC,cAACyD,EAAD,gBACGzB,GACDlC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAO0D,KAAK,WAAW9C,GAAG,YAAY4C,QAASvB,EAAQ0B,SAAUP,IACjEtD,EAAAC,EAAAC,cAAA,SAAO4D,QAAQ,aAAf,mBAIN9D,EAAAC,EAAAC,cAAC6D,EAAD,CACErD,SAAUU,EAAWV,SACrBD,MAAOwB,EAAYb,EAAWX,MAAOyB,EAAMC,QAMpCQ","file":"static/js/posts.f71a8cf9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Title_root__2BL1A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Post_root__1O5J7\",\"title\":\"Post_title__2qNB4\",\"body\":\"Post_body__4XA6I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"PostsList_root__23Sv4\",\"post\":\"PostsList_post__sRbXi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Posts_header__TkvBH\"};","import Title from './Title';\n\nexport default Title;\n","import React from 'react';\nimport styles from './Title.module.css';\n\nconst Title: React.FunctionComponent = React.memo(\n  ({ children }) => (\n    <h1 className={styles.root}>{children}</h1>\n  )\n);\n\nexport default Title;\n","import Post from './Post';\n\nexport default Post;\n","import React from 'react';\nimport { observer } from 'mobx-react-lite';\nimport classNames from 'classnames';\nimport { IPost } from '../../types';\nimport styles from './Post.module.css';\n\ninterface IProps {\n  post: IPost;\n  className?: string;\n}\n\nconst Post: React.FunctionComponent<IProps> = observer(\n  ({ post, className }) => (\n    <div className={classNames(styles.root, className)}>\n      <h3 className={styles.title}>\n        {post.title}\n      </h3>\n      <p className={styles.body}>\n        {post.body}\n      </p>\n    </div>\n  )\n);\n\nexport default Post;\n","import PostsList from './PostsList';\n\nexport default PostsList;\n","import React from 'react';\nimport { observer } from 'mobx-react-lite';\nimport classNames from 'classnames';\nimport Post from '../Post';\nimport { IPost } from '../../types';\nimport { uiLoading } from '../../../app/types';\nimport styles from './PostsList.module.css';\n\ninterface IProps {\n  posts: IPost[];\n  fetching: uiLoading;\n  className?: string;\n}\n\nconst PostsList: React.FunctionComponent<IProps> = observer(\n  ({ posts, fetching, className }) => (\n    <div className={classNames(styles.root, className)}>\n      {posts.map(post => (\n        <Post\n          key={post.id}\n          post={post}\n          className={styles.post}\n        />\n      ))}\n      {fetching === uiLoading.Fetch && <div>Loading...</div>}\n    </div>\n  )\n);\n\nexport default PostsList;\n","import client from '../../../client';\nimport { IPost } from '../../types';\n\nconst fetchPosts = (): Promise<IPost[]> => client.get('/posts');\n\nexport default { fetchPosts };\n","import PostsStore from './PostsStore';\nimport { createContext } from 'react';\n\nconst postsStore = new PostsStore();\nexport const PostsStoreContext = createContext(postsStore);\n\nexport default postsStore;\n","import { observable, action, runInAction } from 'mobx';\nimport fetcher from '../../../app/helpers/fetcher';\nimport services from './services';\nimport { uiLoading } from '../../../app/types';\n\nclass PostsStore {\n\n  @observable fetching: uiLoading = uiLoading.None;\n  @observable posts = observable.map({});\n\n  @action fetch() {\n    return fetcher(this, 'fetching', services.fetchPosts())\n      .then((posts) => runInAction(() => (\n        posts.forEach(post => this.posts.set(post.id, post))\n      )));\n  }\n\n}\n\nexport default PostsStore;\n","import React, { useContext, useEffect, useState, useCallback } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport Title from '../../../app/components/Title';\nimport PostsList from '../../components/PostsList';\nimport UserContext from '../../../app/contexts/UserContext';\nimport { PostsStoreContext } from '../../stores/PostsStore';\nimport { IUser } from '../../../app/types';\nimport { IPost } from '../../types';\nimport styles from './Posts.module.css';\n\nconst filterPosts = (posts: Map<number, IPost>, user: IUser | null, onlyMy: boolean): IPost[] => {\n  let items = Array.from(posts.values());\n\n  return user && items.length && onlyMy\n    ? items.filter(post => post.userId === user.id)\n    : items;\n};\n\nconst Posts: React.FunctionComponent = observer(() => {\n  const [onlyMy, setOnlyMy] = useState(false);\n\n  const user = useContext(UserContext);\n  const postsStore = useContext(PostsStoreContext);\n\n  useEffect(() => { postsStore.fetch() }, []);\n\n  const onOnlyMyChange = useCallback((event) => setOnlyMy(event.target.checked), []);\n\n  return (\n    <div>\n      <div className={styles.header}>\n        <Title>Posts</Title>\n        {!!user && (\n          <div>\n            <input type=\"checkbox\" id=\"own-posts\" checked={onlyMy} onChange={onOnlyMyChange} />\n            <label htmlFor=\"own-posts\">Only my posts</label>\n          </div>\n        )}\n      </div>\n      <PostsList\n        fetching={postsStore.fetching}\n        posts={filterPosts(postsStore.posts, user, onlyMy)}\n      />\n    </div>\n  );\n});\n\nexport default Posts;\n"],"sourceRoot":""}